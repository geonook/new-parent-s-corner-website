generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                String                     @id @default(cuid())
  email                             String                     @unique
  passwordHash                      String?                    @map("password_hash")
  firstName                         String?                    @map("first_name") @db.VarChar(100)
  lastName                          String?                    @map("last_name") @db.VarChar(100)
  displayName                       String?                    @map("display_name") @db.VarChar(200)
  phone                             String?                    @db.VarChar(20)
  avatarUrl                         String?                    @map("avatar_url")
  isActive                          Boolean                    @default(true) @map("is_active")
  emailVerified                     Boolean                    @default(false) @map("email_verified")
  lastLoginAt                       DateTime?                  @map("last_login_at")
  createdAt                         DateTime                   @default(now()) @map("created_at")
  updatedAt                         DateTime                   @updatedAt @map("updated_at")
  googleId                          String?                    @unique @map("google_id")
  provider                          String?                    @default("email") @map("provider") @db.VarChar(20)
  providerAccountId                 String?                    @map("provider_account_id")
  accounts                          Account[]
  announcements                     Announcement[]
  communications                    Communication[]
  communicationReplies              CommunicationReply[]
  eventNotifications                EventNotification[]        @relation("EventNotificationCreator")
  eventRegistrations                EventRegistration[]        @relation("UserEventRegistrations")
  events                            Event[]
  assignedFeedback                  FeedbackForm[]             @relation("FeedbackAssigned")
  feedbackForms                     FeedbackForm[]             @relation("FeedbackAuthor")
  fileUploads                       FileUpload[]
  messageBoard                      MessageBoard[]
  messageReplies                    MessageReply[]
  newsletters                       Newsletter[]
  notificationPreferences           NotificationPreference?
  notifications                     Notification[]
  permissionUpgradeRequestsCreated  PermissionUpgradeRequest[] @relation("PermissionUpgradeRequestedBy")
  permissionUpgradeRequestsReviewed PermissionUpgradeRequest[] @relation("PermissionUpgradeReviewedBy")
  permissionUpgradeRequests         PermissionUpgradeRequest[] @relation("PermissionUpgradeUser")
  resourceEditHistory               ResourceEditHistory[]
  resourceVersions                  ResourceVersion[]
  resources                         Resource[]
  settingsUpdated                   SystemSetting[]
  teacherRemindersCompleted         TeacherReminder[]          @relation("TeacherReminderCompleter")
  teacherRemindersCreated           TeacherReminder[]          @relation("TeacherReminderCreator")
  gradeAssignments                  UserGradeAssignment[]
  assignedRoles                     UserRole[]                 @relation("UserRoleAssigner")
  userRoles                         UserRole[]                 @relation("UserRoles")
  sessions                          UserSession[]

  @@map("users")
}

model Role {
  id          Int        @id @default(autoincrement())
  name        String     @unique @db.VarChar(50)
  displayName String     @map("display_name") @db.VarChar(100)
  description String?
  permissions Json?
  createdAt   DateTime   @default(now()) @map("created_at")
  userRoles   UserRole[]

  @@map("roles")
}

model UserRole {
  id         Int      @id @default(autoincrement())
  userId     String   @map("user_id")
  roleId     Int      @map("role_id")
  assignedBy String?  @map("assigned_by")
  assignedAt DateTime @default(now()) @map("assigned_at")
  assigner   User?    @relation("UserRoleAssigner", fields: [assignedBy], references: [id])
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user       User     @relation("UserRoles", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model PermissionUpgradeRequest {
  id              String    @id @default(cuid())
  userId          String    @map("user_id")
  requestedRole   String    @map("requested_role") @db.VarChar(50)
  reason          String
  status          String    @default("pending") @db.VarChar(20)
  requestedBy     String    @map("requested_by")
  reviewedBy      String?   @map("reviewed_by")
  reviewNotes     String?   @map("review_notes")
  submittedAt     DateTime  @default(now()) @map("submitted_at")
  reviewedAt      DateTime? @map("reviewed_at")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  requestedByUser User      @relation("PermissionUpgradeRequestedBy", fields: [requestedBy], references: [id])
  reviewedByUser  User?     @relation("PermissionUpgradeReviewedBy", fields: [reviewedBy], references: [id])
  user            User      @relation("PermissionUpgradeUser", fields: [userId], references: [id], onDelete: Cascade)

  @@map("permission_upgrade_requests")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String   @db.VarChar(50)
  provider          String   @db.VarChar(50)
  providerAccountId String   @map("provider_account_id") @db.VarChar(255)
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?  @db.VarChar(50)
  scope             String?  @db.VarChar(255)
  id_token          String?
  session_state     String?  @db.VarChar(255)
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model UserSession {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  sessionToken String   @unique @map("session_token")
  expiresAt    DateTime @map("expires_at")
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  createdAt    DateTime @default(now()) @map("created_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model Announcement {
  id             Int       @id @default(autoincrement())
  title          String    @db.VarChar(255)
  content        String
  summary        String?
  authorId       String?   @map("author_id")
  targetAudience String    @map("target_audience") @db.VarChar(20)
  priority       String    @default("medium") @db.VarChar(10)
  status         String    @default("draft") @db.VarChar(20)
  publishedAt    DateTime? @map("published_at")
  expiresAt      DateTime? @map("expires_at")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  author         User?     @relation(fields: [authorId], references: [id])

  @@map("announcements")
}

model Newsletter {
  id              Int       @id @default(autoincrement())
  title           String    @db.VarChar(255)
  content         String
  htmlContent     String?   @map("html_content")
  coverImageUrl   String?   @map("cover_image_url")
  authorId        String?   @map("author_id")
  status          String    @default("draft") @db.VarChar(20)
  issueNumber     Int?      @map("issue_number")
  publicationDate DateTime? @map("publication_date") @db.Date
  downloadCount   Int       @default(0) @map("download_count")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  author          User?     @relation(fields: [authorId], references: [id])

  @@map("newsletters")
}

model Event {
  id                   Int                 @id @default(autoincrement())
  title                String              @db.VarChar(255)
  description          String?
  eventType            String              @map("event_type") @db.VarChar(50)
  startDate            DateTime            @map("start_date") @db.Date
  endDate              DateTime?           @map("end_date") @db.Date
  startTime            DateTime?           @map("start_time") @db.Time(6)
  endTime              DateTime?           @map("end_time") @db.Time(6)
  location             String?             @db.VarChar(255)
  maxParticipants      Int?                @map("max_participants")
  registrationRequired Boolean             @default(false) @map("registration_required")
  registrationDeadline DateTime?           @map("registration_deadline") @db.Date
  targetGrades         Json?               @map("target_grades")
  targetAudience       Json?               @map("target_audience")
  createdBy            String?             @map("created_by")
  status               String              @default("draft") @db.VarChar(20)
  createdAt            DateTime            @default(now()) @map("created_at")
  updatedAt            DateTime            @updatedAt @map("updated_at")
  isFeatured           Boolean             @default(false) @map("is_featured")
  notifications        EventNotification[]
  registrations        EventRegistration[]
  creator              User?               @relation(fields: [createdBy], references: [id])
  attachments          FileUpload[]        @relation("EventAttachments")

  @@map("events")
}

model EventRegistration {
  id               Int       @id @default(autoincrement())
  eventId          Int       @map("event_id")
  userId           String    @map("user_id")
  participantName  String?   @map("participant_name") @db.VarChar(100)
  participantEmail String?   @map("participant_email") @db.VarChar(255)
  participantPhone String?   @map("participant_phone") @db.VarChar(20)
  grade            String?   @db.VarChar(20)
  specialRequests  String?   @map("special_requests")
  status           String    @default("confirmed") @db.VarChar(20)
  registeredAt     DateTime  @default(now()) @map("registered_at")
  checkedIn        Boolean   @default(false) @map("checked_in")
  checkedInAt      DateTime? @map("checked_in_at")
  attendanceNotes  String?   @map("attendance_notes")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  event            Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user             User      @relation("UserEventRegistrations", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@index([eventId, status])
  @@index([userId, status])
  @@map("event_registrations")
}

model EventNotification {
  id             Int       @id @default(autoincrement())
  eventId        Int       @map("event_id")
  type           String    @db.VarChar(50)
  recipientType  String    @map("recipient_type") @db.VarChar(20)
  title          String    @db.VarChar(255)
  message        String
  scheduledFor   DateTime? @map("scheduled_for")
  sentAt         DateTime? @map("sent_at")
  status         String    @default("pending") @db.VarChar(20)
  recipientCount Int       @default(0) @map("recipient_count")
  deliveredCount Int       @default(0) @map("delivered_count")
  errorMessage   String?   @map("error_message")
  createdBy      String?   @map("created_by")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  creator        User?     @relation("EventNotificationCreator", fields: [createdBy], references: [id])
  event          Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId, type])
  @@index([status, scheduledFor])
  @@map("event_notifications")
}

model CoffeeWithPrincipal {
  id                Int       @id @default(autoincrement())
  title             String    @db.VarChar(255)
  description       String?
  gradeLevels       Json      @map("grade_levels")
  presentationUrl   String?   @map("presentation_url")
  materialsUrl      String?   @map("materials_url")
  eventDate         DateTime  @map("event_date") @db.Date
  sessionTime       DateTime? @map("session_time") @db.Time(6)
  location          String?   @db.VarChar(255)
  maxParticipants   Int?      @map("max_participants")
  registrationCount Int       @default(0) @map("registration_count")
  status            String    @default("upcoming") @db.VarChar(20)
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  @@map("coffee_with_principal")
}

model ResourceCategory {
  id          Int        @id @default(autoincrement())
  name        String     @unique @db.VarChar(100)
  displayName String     @map("display_name") @db.VarChar(200)
  description String?
  icon        String?    @db.VarChar(50)
  color       String?    @db.VarChar(50)
  sortOrder   Int        @default(0) @map("sort_order")
  isActive    Boolean    @default(true) @map("is_active")
  createdAt   DateTime   @default(now()) @map("created_at")
  resources   Resource[]

  @@map("resource_categories")
}

model GradeLevel {
  id              Int                   @id @default(autoincrement())
  name            String                @unique @db.VarChar(20)
  displayName     String                @map("display_name") @db.VarChar(50)
  minGrade        Int                   @map("min_grade")
  maxGrade        Int                   @map("max_grade")
  color           String?               @db.VarChar(50)
  sortOrder       Int                   @default(0) @map("sort_order")
  isActive        Boolean               @default(true) @map("is_active")
  resources       Resource[]
  userAssignments UserGradeAssignment[]

  @@map("grade_levels")
}

model Resource {
  id            Int                   @id @default(autoincrement())
  title         String                @db.VarChar(255)
  description   String?
  resourceType  String                @map("resource_type") @db.VarChar(50)
  fileUrl       String?               @map("file_url")
  externalUrl   String?               @map("external_url")
  thumbnailUrl  String?               @map("thumbnail_url")
  fileSize      BigInt?               @map("file_size")
  duration      Int?
  gradeLevelId  Int?                  @map("grade_level_id")
  categoryId    Int?                  @map("category_id")
  createdBy     String?               @map("created_by")
  downloadCount Int                   @default(0) @map("download_count")
  viewCount     Int                   @default(0) @map("view_count")
  isFeatured    Boolean               @default(false) @map("is_featured")
  status        String                @default("draft") @db.VarChar(20)
  createdAt     DateTime              @default(now()) @map("created_at")
  updatedAt     DateTime              @updatedAt @map("updated_at")
  editHistory   ResourceEditHistory[]
  tags          ResourceTagRelation[]
  versions      ResourceVersion[]
  category      ResourceCategory?     @relation(fields: [categoryId], references: [id])
  creator       User?                 @relation(fields: [createdBy], references: [id])
  gradeLevel    GradeLevel?           @relation(fields: [gradeLevelId], references: [id])

  @@map("resources")
}

model ResourceTag {
  id        Int                   @id @default(autoincrement())
  name      String                @unique @db.VarChar(50)
  color     String?               @db.VarChar(20)
  createdAt DateTime              @default(now()) @map("created_at")
  resources ResourceTagRelation[]

  @@map("resource_tags")
}

model ResourceTagRelation {
  resourceId Int         @map("resource_id")
  tagId      Int         @map("tag_id")
  resource   Resource    @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  tag        ResourceTag @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([resourceId, tagId])
  @@map("resource_tag_relations")
}

model ResourceVersion {
  id          Int      @id @default(autoincrement())
  resourceId  Int      @map("resource_id")
  version     String   @db.VarChar(20)
  title       String   @db.VarChar(255)
  description String?
  fileUrl     String?  @map("file_url")
  externalUrl String?  @map("external_url")
  fileSize    BigInt?  @map("file_size")
  changeLog   String?  @map("change_log")
  createdBy   String   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  isActive    Boolean  @default(false) @map("is_active")
  creator     User     @relation(fields: [createdBy], references: [id])
  resource    Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@unique([resourceId, version])
  @@map("resource_versions")
}

model ResourceEditHistory {
  id          Int      @id @default(autoincrement())
  resourceId  Int      @map("resource_id")
  action      String   @db.VarChar(50)
  fieldName   String?  @map("field_name") @db.VarChar(100)
  oldValue    String?  @map("old_value")
  newValue    String?  @map("new_value")
  description String?
  editedBy    String   @map("edited_by")
  editedAt    DateTime @default(now()) @map("edited_at")
  editor      User     @relation(fields: [editedBy], references: [id])
  resource    Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@index([resourceId, editedAt])
  @@map("resource_edit_history")
}

model Notification {
  id          Int       @id @default(autoincrement())
  recipientId String    @map("recipient_id")
  title       String    @db.VarChar(255)
  message     String
  type        String    @db.VarChar(50)
  relatedId   Int?      @map("related_id")
  relatedType String?   @map("related_type") @db.VarChar(50)
  isRead      Boolean   @default(false) @map("is_read")
  readAt      DateTime? @map("read_at")
  priority    String    @default("medium") @db.VarChar(10)
  expiresAt   DateTime? @map("expires_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  recipient   User      @relation(fields: [recipientId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model MessageBoard {
  id         Int            @id @default(autoincrement())
  title      String         @db.VarChar(255)
  content    String
  authorId   String?        @map("author_id")
  boardType  String         @default("general") @db.VarChar(20)
  sourceGroup String?       @map("source_group") @db.VarChar(50) // Vickie, Matthew, Academic Team, Curriculum Team, Instructional Team
  isImportant Boolean       @default(false) @map("is_important")
  isPinned   Boolean        @default(false) @map("is_pinned")
  replyCount Int            @default(0) @map("reply_count")
  viewCount  Int            @default(0) @map("view_count")
  status     String         @default("active") @db.VarChar(20)
  createdAt  DateTime       @default(now()) @map("created_at")
  updatedAt  DateTime       @updatedAt @map("updated_at")
  author     User?          @relation(fields: [authorId], references: [id])
  replies    MessageReply[]

  @@map("message_board")
}

model MessageReply {
  id            Int            @id @default(autoincrement())
  messageId     Int            @map("message_id")
  authorId      String?        @map("author_id")
  content       String
  parentReplyId Int?           @map("parent_reply_id")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  author        User?          @relation(fields: [authorId], references: [id])
  message       MessageBoard   @relation(fields: [messageId], references: [id], onDelete: Cascade)
  parentReply   MessageReply?  @relation("ReplyToReply", fields: [parentReplyId], references: [id])
  childReplies  MessageReply[] @relation("ReplyToReply")

  @@map("message_replies")
}

model FeedbackForm {
  id           Int       @id @default(autoincrement())
  authorId     String?   @map("author_id")
  authorName   String?   @map("author_name") @db.VarChar(100)
  authorEmail  String?   @map("author_email") @db.VarChar(255)
  subject      String    @db.VarChar(255)
  message      String
  category     String?   @db.VarChar(50)
  priority     String    @default("medium") @db.VarChar(10)
  status       String    @default("new") @db.VarChar(20)
  assignedTo   String?   @map("assigned_to")
  response     String?
  responseDate DateTime? @map("response_date")
  isAnonymous  Boolean   @default(false) @map("is_anonymous")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  assignee     User?     @relation("FeedbackAssigned", fields: [assignedTo], references: [id])
  author       User?     @relation("FeedbackAuthor", fields: [authorId], references: [id])

  @@map("feedback_forms")
}

model SystemSetting {
  id          Int      @id @default(autoincrement())
  key         String   @unique @db.VarChar(100)
  value       String?
  description String?
  dataType    String   @default("string") @db.VarChar(20)
  isPublic    Boolean  @default(false) @map("is_public")
  updatedBy   String?  @map("updated_by")
  updatedAt   DateTime @updatedAt @map("updated_at")
  updater     User?    @relation(fields: [updatedBy], references: [id])

  @@index([key, isPublic], name: "system_settings_key_public_idx")
  @@map("system_settings")
}

model FileUpload {
  id               Int      @id @default(autoincrement())
  originalFilename String   @map("original_filename") @db.VarChar(255)
  storedFilename   String   @map("stored_filename") @db.VarChar(255)
  filePath         String   @map("file_path")
  fileSize         BigInt   @map("file_size")
  mimeType         String?  @map("mime_type") @db.VarChar(100)
  uploadedBy       String?  @map("uploaded_by")
  relatedType      String?  @map("related_type") @db.VarChar(50)
  relatedId        Int?     @map("related_id")
  createdAt        DateTime @default(now()) @map("created_at")
  eventAttachment  Event?   @relation("EventAttachments", fields: [relatedId], references: [id])
  uploader         User?    @relation(fields: [uploadedBy], references: [id])

  @@map("file_uploads")
}

model NotificationPreference {
  id                  Int      @id @default(autoincrement())
  userId              String   @unique @map("user_id")
  email               Boolean  @default(true)
  system              Boolean  @default(true)
  browser             Boolean  @default(true)
  doNotDisturbEnabled Boolean  @default(false) @map("do_not_disturb_enabled")
  doNotDisturbStart   String?  @map("do_not_disturb_start") @db.VarChar(5)
  doNotDisturbEnd     String?  @map("do_not_disturb_end") @db.VarChar(5)
  categoryPreferences Json     @default("{}") @map("category_preferences")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_preferences")
}

model UserGradeAssignment {
  id           Int        @id @default(autoincrement())
  userId       String     @map("user_id")
  gradeLevelId Int        @map("grade_level_id")
  relationship String     @db.VarChar(20)
  isActive     Boolean    @default(true) @map("is_active")
  assignedAt   DateTime   @default(now()) @map("assigned_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  gradeLevel   GradeLevel @relation(fields: [gradeLevelId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, gradeLevelId, relationship])
  @@index([userId, isActive])
  @@index([gradeLevelId, relationship, isActive])
  @@map("user_grade_assignments")
}

model TeacherReminder {
  id               Int       @id @default(autoincrement())
  title            String    @db.VarChar(255)
  content          String
  priority         String    @default("medium") @db.VarChar(10)
  status           String    @default("active") @db.VarChar(20)
  dueDate          DateTime? @map("due_date") @db.Date
  dueTime          DateTime? @map("due_time") @db.Time(6)
  createdBy        String?   @map("created_by")
  targetAudience   String    @default("all") @map("target_audience") @db.VarChar(20)
  reminderType     String    @default("general") @map("reminder_type") @db.VarChar(50)
  isRecurring      Boolean   @default(false) @map("is_recurring")
  recurringPattern String?   @map("recurring_pattern") @db.VarChar(50)
  completedAt      DateTime? @map("completed_at")
  completedBy      String?   @map("completed_by")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  completer        User?     @relation("TeacherReminderCompleter", fields: [completedBy], references: [id])
  creator          User?     @relation("TeacherReminderCreator", fields: [createdBy], references: [id])

  @@index([status, dueDate])
  @@index([createdBy, status])
  @@index([priority, dueDate])
  @@map("teacher_reminders")
}

// Unified Communication Model - replaces Announcement and MessageBoard
model Communication {
  id             Int      @id @default(autoincrement())
  title          String   @db.VarChar(255)
  content        String
  summary        String?
  
  // Type and categorization
  type           String   @default("message") @db.VarChar(20) // 'announcement', 'message', 'reminder', 'newsletter'
  sourceGroup    String?  @map("source_group") @db.VarChar(50) // 'Vickie', 'Matthew', 'Academic Team', etc.
  
  // Audience targeting
  targetAudience String   @default("all") @map("target_audience") @db.VarChar(20) // 'teachers', 'parents', 'all'
  boardType      String   @default("general") @db.VarChar(20) // 'teachers', 'parents', 'general'
  
  // Status and priority
  status         String   @default("published") @db.VarChar(20) // 'draft', 'published', 'archived', 'closed'
  priority       String   @default("medium") @db.VarChar(10) // 'low', 'medium', 'high', 'critical'
  
  // Flags
  isImportant    Boolean  @default(false) @map("is_important")
  isPinned       Boolean  @default(false) @map("is_pinned")
  isFeatured     Boolean  @default(false) @map("is_featured")
  
  // Timing
  publishedAt    DateTime? @map("published_at")
  expiresAt      DateTime? @map("expires_at")
  
  // Metadata
  authorId       String?  @map("author_id")
  viewCount      Int      @default(0) @map("view_count")
  replyCount     Int      @default(0) @map("reply_count")
  
  // Timestamps
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  
  // Relations
  author         User?                 @relation(fields: [authorId], references: [id])
  replies        CommunicationReply[]

  @@index([type])
  @@index([sourceGroup])
  @@index([boardType])
  @@index([status])
  @@index([priority])
  @@index([isImportant, isPinned, isFeatured])
  @@index([authorId])
  @@index([createdAt])
  @@index([publishedAt])
  @@map("communications")
}

// Communication Replies Model
model CommunicationReply {
  id               Int               @id @default(autoincrement())
  communicationId  Int               @map("communication_id")
  authorId         String?           @map("author_id")
  content          String
  parentReplyId    Int?              @map("parent_reply_id")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  
  // Relations
  communication    Communication     @relation(fields: [communicationId], references: [id], onDelete: Cascade)
  author           User?             @relation(fields: [authorId], references: [id])
  parentReply      CommunicationReply? @relation("ReplyToReply", fields: [parentReplyId], references: [id])
  childReplies     CommunicationReply[] @relation("ReplyToReply")

  @@index([communicationId])
  @@index([authorId])
  @@index([parentReplyId])
  @@index([createdAt])
  @@map("communication_replies")
}
